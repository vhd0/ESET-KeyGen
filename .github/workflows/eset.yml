name: Generator

on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:
    inputs:
      account:
        description: 'Number of Accounts to be generated (default = 0)'
        required: false
        default: '0'
      key:
        description: 'Number of Keys to be generated (default = 1)'
        required: false
        default: '1'
      mail:
        description: 'Choose the mail provider to generate license'
        required: true
        type: choice
        options:
          - 1secmail
          - guerrillamail
          - developermail
          - mailticking
          - fakemail
          - inboxes
          - incognitomail
        default: fakemail
      key_type:
        description: 'Modes of operation'
        required: true
        type: choice
        options:
          - --key
          - --small-business-key
          - --vpn-codes
        default: --key
      os:
        description: 'Operating System of runner'
        required: true
        type: choice
        options:
          - macOS
          - Linux
          - Windows
        default: macOS
      branch:
        description: "Repository branch (don't touch it if you don't know what it is!!!)"
        required: false
        type: choice
        options:
          - main
          - test
        default: main

env:
  ACCOUNT: 0
  KEY: 1
  MAIL: fakemail
  KEY_TYPE: --key
  OS: Linux
  BRANCH: main

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      account: ${{ steps.setvars.outputs.account }}
      key: ${{ steps.setvars.outputs.key }}
      mail: ${{ steps.setvars.outputs.mail }}
      key_type: ${{ steps.setvars.outputs.key_type }}
      os: ${{ steps.setvars.outputs.os }}
      branch: ${{ steps.setvars.outputs.branch }}
    steps:
      - id: setvars
        run: |
          echo "account=${{ github.event.inputs.account || '0' }}" >> $GITHUB_OUTPUT
          echo "key=${{ github.event.inputs.key || '1' }}" >> $GITHUB_OUTPUT
          echo "mail=${{ github.event.inputs.mail || 'fakemail' }}" >> $GITHUB_OUTPUT
          echo "key_type=${{ github.event.inputs.key_type || '--key' }}" >> $GITHUB_OUTPUT
          echo "os=${{ github.event.inputs.os || 'Linux' }}" >> $GITHUB_OUTPUT
          echo "branch=${{ github.event.inputs.branch || 'main' }}" >> $GITHUB_OUTPUT

  Linux:
    needs: setup
    if: needs.setup.outputs.os == 'Linux'
    runs-on: ubuntu-latest
    steps:
      - name: Generate keys on Linux
        run: |
          sudo apt update
          sudo apt install -y python3-pip python3-venv
          git clone -b ${{ needs.setup.outputs.branch }} https://github.com/rzc0d3r/ESET-KeyGen.git
          cd ESET-KeyGen
          python3 -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt

          ACCOUNT=${{ needs.setup.outputs.account }}
          KEY=${{ needs.setup.outputs.key }}
          MAIL=${{ needs.setup.outputs.mail }}
          KEY_TYPE=${{ needs.setup.outputs.key_type }}

          touch ../new_keys.txt

          if [[ "$ACCOUNT" -ne 0 ]]; then
            python3 main.py --account --email-api $MAIL --repeat $ACCOUNT
          fi

          if [[ "$KEY" -ne 0 ]]; then
            python3 main.py $KEY_TYPE --email-api $MAIL --repeat $KEY
            DATE=$(date -u +"%Y-%m-%d")
            for f in ./*KEYS.txt; do
              while IFS= read -r line; do
                echo "$DATE|$line" >> ../new_keys.txt
              done < "$f"
            done
          fi

      - name: Upload keys
        uses: actions/upload-artifact@v4
        with:
          name: new-keys
          path: ../new_keys.txt

  macOS:
    needs: setup
    if: needs.setup.outputs.os == 'macOS'
    runs-on: macos-latest
    steps:
      - name: Generate keys on macOS
        run: |
          brew install python
          git clone -b ${{ needs.setup.outputs.branch }} https://github.com/rzc0d3r/ESET-KeyGen.git
          cd ESET-KeyGen
          python3 -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt

          ACCOUNT=${{ needs.setup.outputs.account }}
          KEY=${{ needs.setup.outputs.key }}
          MAIL=${{ needs.setup.outputs.mail }}
          KEY_TYPE=${{ needs.setup.outputs.key_type }}

          touch ../new_keys.txt

          if [[ "$ACCOUNT" -ne 0 ]]; then
            python3 main.py --account --email-api $MAIL --repeat $ACCOUNT
          fi

          if [[ "$KEY" -ne 0 ]]; then
            python3 main.py $KEY_TYPE --email-api $MAIL --repeat $KEY
            DATE=$(date -u +"%Y-%m-%d")
            for f in ./*KEYS.txt; do
              while IFS= read -r line; do
                echo "$DATE|$line" >> ../new_keys.txt
              done < "$f"
            done
          fi

      - name: Upload keys
        uses: actions/upload-artifact@v4
        with:
          name: new-keys
          path: ../new_keys.txt

  Windows:
    needs: setup
    if: needs.setup.outputs.os == 'Windows'
    runs-on: windows-latest
    steps:
      - name: Generate keys on Windows
        shell: pwsh
        run: |
          git clone -b ${{ needs.setup.outputs.branch }} https://github.com/rzc0d3r/ESET-KeyGen.git
          cd ESET-KeyGen
          pip install -r requirements.txt

          $ACCOUNT = "${{ needs.setup.outputs.account }}"
          $KEY = "${{ needs.setup.outputs.key }}"
          $MAIL = "${{ needs.setup.outputs.mail }}"
          $KEY_TYPE = "${{ needs.setup.outputs.key_type }}"

          New-Item -ItemType File -Path ..\new_keys.txt -Force | Out-Null

          if ($ACCOUNT -ne 0) {
            python3 main.py --account --email-api $MAIL --repeat $ACCOUNT
          }
          if ($KEY -ne 0) {
            python3 main.py $KEY_TYPE --email-api $MAIL --repeat $KEY
            $date = Get-Date -Format "yyyy-MM-dd"
            Get-Content .\*KEYS.txt | ForEach-Object { "$date|$_" } | Out-File ..\new_keys.txt -Encoding utf8 -Append
          }

      - name: Upload keys
        uses: actions/upload-artifact@v4
        with:
          name: new-keys
          path: ../new_keys.txt

  write-keys:
    needs: [Linux, macOS, Windows]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download generated keys
        uses: actions/download-artifact@v4
        with:
          name: new-keys
          path: keys

      - name: Merge and prune Keys.txt
        run: |
          touch Keys.txt
          if [ -f keys/new_keys.txt ]; then
            cat keys/new_keys.txt >> Keys.txt
          fi
          awk -F'|' -v limit="$(date -u -d '30 days ago' +%Y-%m-%d)" '$1 >= limit' Keys.txt > temp && mv temp Keys.txt

      - name: Git diff check
        run: |
          git status
          git diff

      - name: Commit updated Keys.txt
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add Keys.txt
          git diff --cached --quiet || git commit -m "Update Keys.txt with new keys"
          git push origin main
