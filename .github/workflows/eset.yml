name: Generator

on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:
    inputs:
      account:
        description: 'Number of Accounts to be generated (default = 0)'
        required: false
        default: '0'
      key:
        description: 'Number of Keys to be generated (default = 1)'
        required: false
        default: '1'
      mail:
        description: 'Choose the mail provider to generate license'
        required: true
        type: choice
        options:
          - 1secmail
          - guerrillamail
          - developermail
          - mailticking
          - fakemail
          - inboxes
          - incognitomail
        default: fakemail
      key_type:
        description: 'Modes of operation'
        required: true
        type: choice
        options:
          - --key
          - --small-business-key
          - --vpn-codes
        default: --key
      os:
        description: 'Operating System of runner'
        required: true
        type: choice
        options:
          - macOS
          - Linux
          - Windows
        default: macOS
      branch:
        description: "Repository branch (don't touch it if you don't know what it is!!!)"
        required: false
        type: choice
        options:
          - main
          - test
        default: main

env:
  ACCOUNT: 0
  KEY: 1
  MAIL: fakemail
  KEY_TYPE: --key
  OS: Linux
  BRANCH: main

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      account: ${{ steps.setvars.outputs.account }}
      key: ${{ steps.setvars.outputs.key }}
      mail: ${{ steps.setvars.outputs.mail }}
      key_type: ${{ steps.setvars.outputs.key_type }}
      os: ${{ steps.setvars.outputs.os }}
      branch: ${{ steps.setvars.outputs.branch }}
    steps:
      - name: Set variables based on event
        id: setvars
        run: |
          echo "account=${{ github.event.inputs.account || '0' }}" >> $GITHUB_OUTPUT
          echo "key=${{ github.event.inputs.key || '1' }}" >> $GITHUB_OUTPUT
          echo "mail=${{ github.event.inputs.mail || 'fakemail' }}" >> $GITHUB_OUTPUT
          echo "key_type=${{ github.event.inputs.key_type || '--key' }}" >> $GITHUB_OUTPUT
          echo "os=${{ github.event.inputs.os || 'Linux' }}" >> $GITHUB_OUTPUT
          echo "branch=${{ github.event.inputs.branch || 'main' }}" >> $GITHUB_OUTPUT

  Linux:
    needs: setup
    if: needs.setup.outputs.os == 'Linux'
    runs-on: ubuntu-latest
    steps:
      - name: Generate key
        run: |
          ACCOUNT=${{ needs.setup.outputs.account }}
          KEY=${{ needs.setup.outputs.key }}
          MAIL=${{ needs.setup.outputs.mail }}
          KEY_TYPE=${{ needs.setup.outputs.key_type }}
          BRANCH=${{ needs.setup.outputs.branch }}
          git clone -b ${BRANCH} https://github.com/rzc0d3r/ESET-KeyGen.git
          cd ESET-KeyGen
          sudo apt update
          sudo apt install -y python3-pip python3-venv jq
          python3 -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt
          if [[ ${ACCOUNT} -ne 0 && ${KEY} -ne 0 ]]; then
            python3 main.py --auto-detect-browser --account --email-api ${MAIL} --skip-update-check --no-logo --disable-progress-bar --disable-logging --repeat ${ACCOUNT}
            python3 main.py --auto-detect-browser ${KEY_TYPE} --email-api ${MAIL} --skip-update-check --no-logo --disable-progress-bar --disable-logging --repeat ${KEY}
            echo "Account:" >> $GITHUB_STEP_SUMMARY
            cat ./*ACCOUNTS.txt >> $GITHUB_STEP_SUMMARY
            echo -e "\nKey:" >> $GITHUB_STEP_SUMMARY
            cat ./*KEYS.txt >> $GITHUB_STEP_SUMMARY
          elif [[ ${ACCOUNT} -ne 0 ]]; then
            python3 main.py --auto-detect-browser --account --email-api ${MAIL} --skip-update-check --no-logo --disable-progress-bar --disable-logging --repeat ${ACCOUNT}
            echo -e "\nAccount:" >> $GITHUB_STEP_SUMMARY
            cat ./*ACCOUNTS.txt >> $GITHUB_STEP_SUMMARY
          elif [[ ${KEY} -ne 0 ]]; then
            python3 main.py --auto-detect-browser ${KEY_TYPE} --email-api ${MAIL} --skip-update-check --no-logo --disable-progress-bar --disable-logging --repeat ${KEY}
            echo -e "\nKey:" >> $GITHUB_STEP_SUMMARY
            cat ./*KEYS.txt >> $GITHUB_STEP_SUMMARY
          fi

      - name: Checkout repository
        if: ${{ needs.setup.outputs.key != '0' }}
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.setup.outputs.branch }}
          
      - name: Update keys file
        if: ${{ needs.setup.outputs.key != '0' }}
        run: |
          if [ ! -f eset_keys.json ]; then
            echo '{"keys":[]}' > eset_keys.json
          fi
          
          NEW_KEY=$(cat ESET-KeyGen/*KEYS.txt)
          CURRENT_DATE=$(date -u +"%Y-%m-%d")
          
          TMP_FILE=$(mktemp)
          
          jq --arg key "$NEW_KEY" --arg date "$CURRENT_DATE" '
          .keys = (
            .keys | map(
              select(
                (now - (.[1] | fromdateiso8601)) < 2592000
              )
            )
          ) + [[$key, $date]]
          ' eset_keys.json > "$TMP_FILE"
          
          mv "$TMP_FILE" eset_keys.json
          
      - name: Commit and push if changed
        if: ${{ needs.setup.outputs.key != '0' }}
        run: |
          git config --global user.name 'GitHub Action'
          git config --global user.email 'action@github.com'
          git add eset_keys.json
          git diff --cached --quiet || (git commit -m "Update ESET keys [skip ci]" && git push)

  macOS:
    needs: setup
    if: needs.setup.outputs.os == 'macOS'
    runs-on: macos-latest
    steps:
      - name: Generate key
        run: |
          ACCOUNT=${{ needs.setup.outputs.account }}
          KEY=${{ needs.setup.outputs.key }}
          MAIL=${{ needs.setup.outputs.mail }}
          KEY_TYPE=${{ needs.setup.outputs.key_type }}
          BRANCH=${{ needs.setup.outputs.branch }}
          git clone -b ${BRANCH} https://github.com/rzc0d3r/ESET-KeyGen.git
          cd ESET-KeyGen
          brew install python jq
          python3 -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt
          if [[ ${ACCOUNT} -ne 0 && ${KEY} -ne 0 ]]; then
            python3 main.py --auto-detect-browser --account --email-api ${MAIL} --skip-update-check --no-logo --disable-progress-bar --disable-logging --repeat ${ACCOUNT}
            python3 main.py --auto-detect-browser ${KEY_TYPE} --email-api ${MAIL} --skip-update-check --no-logo --disable-progress-bar --disable-logging --repeat ${KEY}
            echo "Account:" >> $GITHUB_STEP_SUMMARY
            cat ./*ACCOUNTS.txt >> $GITHUB_STEP_SUMMARY
            echo -e "\nKey:" >> $GITHUB_STEP_SUMMARY
            cat ./*KEYS.txt >> $GITHUB_STEP_SUMMARY
          elif [[ ${ACCOUNT} -ne 0 ]]; then
            python3 main.py --auto-detect-browser --account --email-api ${MAIL} --skip-update-check --no-logo --disable-progress-bar --disable-logging --repeat ${ACCOUNT}
            echo -e "\nAccount:" >> $GITHUB_STEP_SUMMARY
            cat ./*ACCOUNTS.txt >> $GITHUB_STEP_SUMMARY
          elif [[ ${KEY} -ne 0 ]]; then
            python3 main.py --auto-detect-browser ${KEY_TYPE} --email-api ${MAIL} --skip-update-check --no-logo --disable-progress-bar --disable-logging --repeat ${KEY}
            echo -e "\nKey:" >> $GITHUB_STEP_SUMMARY
            cat ./*KEYS.txt >> $GITHUB_STEP_SUMMARY
          fi

      - name: Checkout repository
        if: ${{ needs.setup.outputs.key != '0' }}
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.setup.outputs.branch }}
          
      - name: Update keys file
        if: ${{ needs.setup.outputs.key != '0' }}
        run: |
          if [ ! -f eset_keys.json ]; then
            echo '{"keys":[]}' > eset_keys.json
          fi
          
          NEW_KEY=$(cat ESET-KeyGen/*KEYS.txt)
          CURRENT_DATE=$(date -u +"%Y-%m-%d")
          
          TMP_FILE=$(mktemp)
          
          jq --arg key "$NEW_KEY" --arg date "$CURRENT_DATE" '
          .keys = (
            .keys | map(
              select(
                (now - (.[1] | fromdateiso8601)) < 2592000
              )
            )
          ) + [[$key, $date]]
          ' eset_keys.json > "$TMP_FILE"
          
          mv "$TMP_FILE" eset_keys.json
          
      - name: Commit and push if changed
        if: ${{ needs.setup.outputs.key != '0' }}
        run: |
          git config --global user.name 'GitHub Action'
          git config --global user.email 'action@github.com'
          git add eset_keys.json
          git diff --cached --quiet || (git commit -m "Update ESET keys [skip ci]" && git push)

  Windows:
    needs: setup
    if: needs.setup.outputs.os == 'Windows'
    runs-on: windows-latest
    steps:
      - name: Generate key
        run: |
          $ACCOUNT="${{ needs.setup.outputs.account }}"
          $KEY="${{ needs.setup.outputs.key }}"
          $MAIL="${{ needs.setup.outputs.mail }}"
          $KEY_TYPE="${{ needs.setup.outputs.key_type }}"
          $BRANCH="${{ needs.setup.outputs.branch }}"
          git clone -b $BRANCH https://github.com/rzc0d3r/ESET-KeyGen.git
          cd ESET-KeyGen
          pip install -r requirements.txt
          if ($ACCOUNT -ne 0 -and $KEY -ne 0) {
              python3 main.py --auto-detect-browser --account --email-api $MAIL --skip-update-check --no-logo --disable-progress-bar --disable-logging --repeat $ACCOUNT
              python3 main.py --auto-detect-browser $KEY_TYPE --email-api $MAIL --skip-update-check --no-logo --disable-progress-bar --disable-logging --repeat $KEY
              echo "Account:" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append
              Get-Content -Path ./*ACCOUNTS.txt | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append
              echo "`nKey:" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append
              Get-Content -Path ./*KEYS.txt | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append
          }
          elseif ($ACCOUNT -ne 0) {
              python3 main.py --auto-detect-browser --account --email-api $MAIL --skip-update-check --no-logo --disable-progress-bar --disable-logging --repeat $ACCOUNT
              echo "`nAccount:" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append
              Get-Content -Path ./*ACCOUNTS.txt | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append
          }
          elseif ($KEY -ne 0) {
              python3 main.py --auto-detect-browser $KEY_TYPE --email-api $MAIL --skip-update-check --no-logo --disable-progress-bar --disable-logging --repeat $KEY
              echo "`nKey:" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append
              Get-Content -Path ./*KEYS.txt | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append
          }

      - name: Checkout repository
        if: ${{ needs.setup.outputs.key != '0' }}
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.setup.outputs.branch }}
          
      - name: Update keys file
        if: ${{ needs.setup.outputs.key != '0' }}
        run: |
          if (-not (Test-Path eset_keys.json)) {
            Set-Content -Path eset_keys.json -Value '{"keys":[]}'
          }
          
          $NEW_KEY = Get-Content ESET-KeyGen/*KEYS.txt
          $CURRENT_DATE = (Get-Date).ToUniversalTime().ToString("yyyy-MM-dd")
          
          $json = Get-Content eset_keys.json | ConvertFrom-Json
          
          $json.keys = @($json.keys | Where-Object {
            $keyDate = [DateTime]::Parse($_[1])
            ((Get-Date).ToUniversalTime() - $keyDate).TotalDays -lt 30
          })
          
          $json.keys += ,@($NEW_KEY, $CURRENT_DATE)
          
          $json | ConvertTo-Json -Depth 10 | Set-Content eset_keys.json

      - name: Commit and push if changed
        if: ${{ needs.setup.outputs.key != '0' }}
        run: |
          git config --global user.name 'GitHub Action'
          git config --global user.email 'action@github.com'
          git add eset_keys.json
          git diff --cached --quiet; if ($LASTEXITCODE -eq 1) {
            git commit -m "Update ESET keys [skip ci]"
            git push
          }
