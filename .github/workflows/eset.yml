name: Automated Account and Key Generator
on:
  # Lên lịch chạy hàng ngày vào lúc 00:00 UTC
  schedule:
    - cron: "0 0 * * *"
  # Cho phép chạy thủ công từ giao diện GitHub Actions
  workflow_dispatch:
    inputs:
      account:
        description: 'Số lượng tài khoản cần tạo (mặc định = 0)'
        required: false
        default: '0'
        type: string
      key:
        description: 'Số lượng khóa cần tạo (mặc định = 1)'
        required: false
        default: '1'
        type: string
      mail:
        description: 'Chọn nhà cung cấp email để tạo giấy phép'
        required: true
        type: choice
        options:
          - 1secmail
          - guerrillamail
          - developermail
          - mailticking
          - fakemail
          - inboxes
          - incognitomail
          - emailfake
        default: emailfake
      key_type:
        description: 'Chế độ hoạt động'
        required: true
        type: choice
        options:
          - --key
          - --small-business-key
        default: --key
      os:
        description: 'Hệ điều hành của runner (Linux, macOS, Windows)'
        required: true
        type: choice
        options:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        default: windows-latest
      branch:
        description: "Nhánh kho lưu trữ (không chạm vào nếu bạn không biết gì về nó!!!)"
        required: false
        type: choice
        options:
          - main
          - test
        default: main

jobs:
  prepare-run:
    runs-on: ubuntu-latest
    # Luôn chạy job này để xác định các biến đầu vào, dù là thủ công hay tự động
    outputs:
      account: ${{ steps.set-vars.outputs.account }}
      key: ${{ steps.set-vars.outputs.key }}
      mail: ${{ steps.set-vars.outputs.mail }}
      key_type: ${{ steps.set-vars.outputs.key_type }}
      os: ${{ steps.set-vars.outputs.os }}
      branch: ${{ steps.set-vars.outputs.branch }}
    steps:
      - name: Đặt biến dựa trên loại trigger
        id: set-vars
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Sử dụng các giá trị nhập từ workflow_dispatch nếu chạy thủ công
            echo "account=${{ github.event.inputs.account || '0' }}" >> $GITHUB_OUTPUT
            echo "key=${{ github.event.inputs.key || '1' }}" >> $GITHUB_OUTPUT
            echo "mail=${{ github.event.inputs.mail || 'emailfake' }}" >> $GITHUB_OUTPUT
            echo "key_type=${{ github.event.inputs.key_type || '--key' }}" >> $GITHUB_OUTPUT
            echo "os=${{ github.event.inputs.os || 'windows-latest' }}" >> $GITHUB_OUTPUT
            echo "branch=${{ github.event.inputs.branch || 'main' }}" >> $GITHUB_OUTPUT
            echo "Chạy thủ công với các giá trị đã chọn."
          else # Sự kiện schedule (lịch trình)
            # Định nghĩa các tùy chọn để ngẫu nhiên hóa
            mail_options=("1secmail" "guerrillamail" "developermail" "mailticking" "fakemail" "inboxes" "incognitomail" "emailfake")
            key_type_options=("--key" "--small-business-key")
            os_options=("ubuntu-latest" "macos-latest" "windows-latest")
            branch_options=("main" "test")
            # Chọn ngẫu nhiên các giá trị
            random_mail=${mail_options[$RANDOM % ${#mail_options[@]}]}
            random_key_type=${key_type_options[$RANDOM % ${#key_type_options[@]}]}
            random_os=${os_options[$RANDOM % ${#os_options[@]}]}
            random_branch=${branch_options[$RANDOM % ${#branch_options[@]}]}
            echo "account=0" >> $GITHUB_OUTPUT
            echo "key=1" >> $GITHUB_OUTPUT
            echo "mail=$random_mail" >> $GITHUB_OUTPUT
            echo "key_type=$random_key_type" >> $GITHUB_OUTPUT
            echo "os=$random_os" >> $GITHUB_OUTPUT
            echo "branch=$random_branch" >> $GITHUB_OUTPUT
            echo "Chạy tự động với các giá trị ngẫu nhiên."
          fi

  generate-account-and-key:
    # Job này phụ thuộc vào 'prepare-run' để lấy các đầu vào đã được xác định
    needs: prepare-run
    # Sử dụng hệ điều hành được chọn từ job trước
    runs-on: ${{ needs.prepare-run.outputs.os }}
    permissions:
      contents: write # Cấp quyền ghi cho GITHUB_TOKEN để đẩy thay đổi
    steps:
      - name: Kiểm tra kho lưu trữ
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }} # Đảm bảo GITHUB_TOKEN được sử dụng để checkout
      
      - name: Thiết lập & Chạy Script (Đa nền tảng)
        shell: bash # Sử dụng Bash cho tất cả các hệ điều hành để nhất quán
        run: |
          # Cài đặt Python và các phụ thuộc
          if command -v brew &> /dev/null; then
            # macOS
            brew install python@3.11 || true
          elif command -v apt-get &> /dev/null; then
            # Linux
            sudo apt update
            sudo apt install -y python3-pip python3-venv
          elif command -v python &> /dev/null; then
            # Windows (Git Bash/WSL) - Python thường đã có sẵn
            echo "Python đã có sẵn trên Windows runner."
          else
            echo "Lỗi: Không tìm thấy Python. Vui lòng cài đặt Python trên runner."
            exit 1
          fi

          # Tạo và kích hoạt môi trường ảo Python
          python3 -m venv venv
          # Kích hoạt venv tùy thuộc vào OS
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            source venv/Scripts/activate # Đối với Windows runners (Git Bash/WSL)
          else
            source venv/bin/activate # Đối với Linux/macOS
          fi
          
          # Cài đặt các phụ thuộc Python
          pip install -r requirements.txt
          
          # Gán các biến từ đầu ra của job 'prepare-run'
          ACCOUNT="${{ needs.prepare-run.outputs.account }}"
          KEY="${{ needs.prepare-run.outputs.key }}"
          MAIL="${{ needs.prepare-run.outputs.mail }}"
          KEY_TYPE="${{ needs.prepare-run.outputs.key_type }}"
          echo "Đang chạy với:"
          echo "  Tài khoản: $ACCOUNT"
          echo "  Khóa: $KEY"
          echo "  Email: $MAIL"
          echo "  Loại khóa: $KEY_TYPE"
          
          # Chạy tạo tài khoản nếu ACCOUNT không phải là 0
          if [[ "$ACCOUNT" != "0" ]]; then
            python3 main.py --auto-detect-browser --account --email-api "$MAIL" --skip-update-check --no-logo --disable-progress-bar --disable-logging --repeat "$ACCOUNT"
            echo "### Tài khoản đã tạo" >> $GITHUB_STEP_SUMMARY
            cat ./*ACCOUNTS.txt >> $GITHUB_STEP_SUMMARY 2>/dev/null || echo "Không có" >> $GITHUB_STEP_SUMMARY
          fi
          # Chạy tạo khóa nếu KEY không phải là 0
          if [[ "$KEY" != "0" ]]; then
            python3 main.py --auto-detect-browser "$KEY_TYPE" --email-api "$MAIL" --skip-update-check --no-logo --disable-progress-bar --disable-logging --repeat "$KEY"
            echo -e "\n### Khóa đã tạo" >> $GITHUB_STEP_SUMMARY
            cat ./*KEYS.txt >> $GITHUB_STEP_SUMMARY 2>/dev/null || echo "Không có" >> $GITHUB_STEP_SUMMARY
          fi

          # Function to extract and format a single license block into a table row
          format_block_to_row() {
            local block="$1"
            # Use awk to extract the value, then tr to remove newlines, and sed to trim leading/trailing whitespace
            # The '|| echo ""' ensures that if no match is found, an empty string is used
            local email=$(echo "$block" | awk -F': ' '/Account Email:/ {print $2}' | tr -d '\n\r' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//' || echo "")
            local password=$(echo "$block" | awk -F': ' '/Account Password:/ {print $2}' | tr -d '\n\r' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//' || echo "")
            local license_name=$(echo "$block" | awk -F': ' '/License Name:/ {print $2}' | tr -d '\n\r' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//' || echo "")
            local license_key=$(echo "$block" | awk -F': ' '/License Key:/ {print $2}' | tr -d '\n\r' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//' || echo "")
            local license_out_date=$(echo "$block" | awk -F': ' '/License Out Date:/ {print $2}' | tr -d '\n\r' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//' || echo "")

            # Wrap password and license_key in backticks for inline code formatting
            echo "| $email | \`$password\` | $license_name | \`$license_key\` | $license_out_date |"
          }

          # Define the temporary file for new entries
          NEW_ENTRIES_FILE="new_generated_entries.md"
          # Clear the new entries file before processing
          > "$NEW_ENTRIES_FILE"

          # Process ACCOUNTS.txt and KEYS.txt, appending to NEW_ENTRIES_FILE
          if [[ "$ACCOUNT" != "0" ]]; then
              if compgen -G "*ACCOUNTS.txt" > /dev/null; then
                  file_content=$(cat *ACCOUNTS.txt)
                  echo "$file_content" | awk -v RS="-------------------------------------------------" 'NF { print $0 }' | while IFS= read -r block; do
                      format_block_to_row "$block" >> "$NEW_ENTRIES_FILE"
                  done
              fi
          fi

          if [[ "$KEY" != "0" ]]; then
              if compgen -G "*KEYS.txt" > /dev/null; then
                  file_content=$(cat *KEYS.txt)
                  echo "$file_content" | awk -v RS="-------------------------------------------------" 'NF { print $0 }' | while IFS= read -r block; do
                      format_block_to_row "$block" >> "$NEW_ENTRIES_FILE"
                  done
              fi
          fi

          # Now, combine existing and new entries, then trim to 30
          ALL_ENTRIES_FILE="all_generated_entries.md"
          # If generated_results.md exists, copy its content (excluding header)
          if [ -f generated_results.md ]; then
              tail -n +3 generated_results.md > "$ALL_ENTRIES_FILE"
          else
              > "$ALL_ENTRIES_FILE" # Create empty if not exists
          fi

          # Append new entries
          cat "$NEW_ENTRIES_FILE" >> "$ALL_ENTRIES_FILE"

          # Re-write generated_results.md with header and latest 30 entries
          echo "| Email tài khoản | Mật khẩu tài khoản | Tên giấy phép | Khóa giấy phép | Ngày hết hạn |" > generated_results.md
          echo "|-----------------|--------------------|---------------|---------------|--------------|" >> generated_results.md
          tail -n 30 "$ALL_ENTRIES_FILE" >> generated_results.md

          # Clean up temporary files
          rm -f "$NEW_ENTRIES_FILE" "$ALL_ENTRIES_FILE"
          # Kết thúc logic định dạng và tạo generated_results.md

      - name: Cập nhật và đẩy kết quả vào nhánh chính
        if: success() || failure() # Chạy ngay cả khi các bước trước có lỗi nhẹ
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Kiểm tra xem có thay đổi nào trong generated_results.md không
          git add generated_results.md
          git diff-index --quiet HEAD || git commit -m "Cập nhật kết quả tạo tài khoản và khóa tự động"
          
          # Đẩy lên nhánh đã chọn
          git push origin ${{ needs.prepare-run.outputs.branch }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Cần token để đẩy lên repo
