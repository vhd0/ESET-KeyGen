name: Automated Account and Key Generator

on:
  schedule:
    - cron: "0 0 * * *" # Chạy tự động vào lúc 00:00 UTC mỗi ngày
  workflow_dispatch:
    inputs:
      account:
        description: 'Số lượng tài khoản cần tạo (mặc định = 0)'
        required: false
        default: '0'
        type: string
      key:
        description: 'Số lượng khóa cần tạo (mặc định = 1)'
        required: false
        default: '1'
        type: string
      branch:
        description: "Nhánh kho lưu trữ (không chạm vào nếu bạn không biết gì về nó!!!)"
        required: false
        type: choice
        options:
          - main
          - test
        default: main

jobs:
  generate-account-and-key:
    runs-on: ubuntu-latest # Chạy trên môi trường Ubuntu mới nhất
    permissions:
      contents: write # Cấp quyền ghi vào kho lưu trữ để cập nhật file Markdown
    steps:
      - name: Kiểm tra kho lưu trữ
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.event.inputs.branch || 'main' }}

      - name: Thiết lập môi trường Python
        run: |
          sudo apt update
          sudo apt install -y python3-pip python3-venv

      - name: Tạo Swap File (để tránh lỗi hết bộ nhớ)
        run: |
          echo "Tạo swap file 4G..."
          sudo fallocate -l 4G /swapfile # Tạo file swap kích thước 4GB
          sudo chmod 600 /swapfile       # Thiết lập quyền chỉ đọc/ghi cho root
          sudo mkswap /swapfile          # Định dạng file thành không gian swap
          sudo swapon /swapfile          # Kích hoạt swap file
          echo "Swap file đã được tạo và kích hoạt."

      - name: Thử tất cả tổ hợp cho đến khi thành công
        shell: bash
        env:
          ACCOUNT: ${{ github.event.inputs.account || '0' }}
          KEY: ${{ github.event.inputs.key || '1' }}
        run: |
          # Clone công cụ tạo key
          git clone -b ${{ github.event.inputs.branch || 'main' }} https://github.com/rzc0d3r/ESET-KeyGen.git
          cd ESET-KeyGen
          
          # Tạo và kích hoạt môi trường ảo Python
          python3 -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt

          # Định nghĩa tất cả tổ hợp có thể của nhà cung cấp mail, loại key và hệ điều hành
          MAIL_PROVIDERS=("1secmail" "guerrillamail" "developermail" "mailticking" "fakemail" "inboxes" "incognitomail" "emailfake")
          KEY_TYPES=("--key" "--small-business-key")
          OS_LIST=("Linux" "Windows" "macOS")
          
          # Ngẫu nhiên hóa thứ tự các tổ hợp để thử
          SHUFFLED_MAILS=($(printf "%s\n" "${MAIL_PROVIDERS[@]}" | shuf))
          SHUFFLED_KEYS=($(printf "%s\n" "${KEY_TYPES[@]}" | shuf))
          SHUFFLED_OS=($(printf "%s\n" "${OS_LIST[@]}" | shuf))

          SUCCESS=0
          echo "Bắt đầu thử các tổ hợp ngẫu nhiên..."

          # Function để chạy command với timeout, tránh việc script bị treo
          run_with_timeout() {
            local timeout_duration=90 # Thời gian timeout là 90 giây
            local command=("$@")
            
            # Chạy command trong nền
            "${command[@]}" & pid=$!
            
            # Chờ trong timeout_duration giây
            for ((i=1; i<=timeout_duration; i++)); do
              if ! kill -0 $pid 2>/dev/null; then
                # Process đã kết thúc bình thường
                wait $pid
                return $?
              fi
              sleep 1
            done
            
            # Kill process nếu vẫn còn chạy sau timeout
            kill -9 $pid 2>/dev/null
            wait $pid 2>/dev/null
            echo "Process timed out after ${timeout_duration}s"
            return 124 # Mã lỗi cho timeout
          }

          # Function để phân tích kết quả và cập nhật file markdown
          update_markdown_results() {
              local output_file="$1"
              local results_file="../generated_results.md"
              local current_datetime=$(date -u '+%Y-%m-%d %H:%M:%S')
              local new_entries=() # Mảng để lưu trữ các hàng mới được định dạng

              local temp_key=""
              local temp_email=""
              local temp_password=""
              local temp_expires=""
              local temp_license_name=""

              # Đọc nhật ký đầu ra từng dòng để trích xuất tất cả chi tiết key/tài khoản
              while IFS= read -r line; do
                  if [[ "$line" == *"Account Email:"* ]]; then
                      # Trích xuất giá trị sau "Account Email: " và loại bỏ khoảng trắng thừa
                      temp_email=$(echo "$line" | sed -E 's/^Account Email: *(.*)/\1/' | sed 's/[[:space:]]*$//')
                  elif [[ "$line" == *"Account Password:"* ]]; then
                      # Trích xuất giá trị sau "Account Password: " và loại bỏ khoảng trắng thừa
                      temp_password=$(echo "$line" | sed -E 's/^Account Password: *(.*)/\1/' | sed 's/[[:space:]]*$//')
                  elif [[ "$line" == *"License Name:"* ]]; then
                      # Trích xuất giá trị sau "License Name: " và loại bỏ khoảng trắng thừa
                      temp_license_name=$(echo "$line" | sed -E 's/^License Name: *(.*)/\1/' | sed 's/[[:space:]]*$//')
                  elif [[ "$line" == *"License Key:"* ]]; then
                      # Trích xuất giá trị sau "License Key: " và loại bỏ khoảng trắng thừa
                      temp_key=$(echo "$line" | sed -E 's/^License Key: *(.*)/\1/' | sed 's/[[:space:]]*$//')
                  elif [[ "$line" == *"License Out Date:"* ]]; then
                      # Trích xuất giá trị sau "License Out Date: ", định dạng lại ngày và loại bỏ khoảng trắng thừa
                      # Sửa đổi để xử lý cả định dạng dd.MM.yyyy và dd/MM/yyyy
                      temp_expires=$(echo "$line" | sed -E 's/^License Out Date: *(.*)/\1/' | sed 's/[[:space:]]*$//' | sed -E 's#([0-9]{2})[./]([0-9]{2})[./]([0-9]{4})#\3-\2-\1#g')
                      
                      # Khi tìm thấy License Out Date và tất cả các phần tử đều có giá trị, thêm vào new_entries
                      if [[ -n "$temp_key" && -n "$temp_email" && -n "$temp_password" && -n "$temp_expires" && -n "$temp_license_name" ]]; then
                          # Thoát (escape) ký tự '|' trong mật khẩu để nó không bị hiểu là phân cách cột trong Markdown
                          escaped_password=$(echo "$temp_password" | sed 's/|/\\|/g')
                          new_entries+=("| $temp_key | $temp_email | $escaped_password | $temp_expires | $temp_license_name |")
                          # Đặt lại các biến tạm thời cho block tiếp theo
                          temp_key=""
                          temp_email=""
                          temp_password=""
                          temp_expires=""
                          temp_license_name=""
                      fi
                  fi
              done < "$output_file"

              if [ ${#new_entries[@]} -eq 0 ]; then
                  echo "Cảnh báo: Không tìm thấy bất kỳ cặp Key/Account hợp lệ nào trong output.log. Bỏ qua việc cập nhật bảng."
                  return 1
              fi

              # Đọc nội dung hiện có của file Markdown (loại bỏ phần tiêu đề và dấu phân cách của bảng)
              local existing_table_rows=()
              if [ -f "$results_file" ]; then
                  local found_separator=0
                  while IFS= read -r line; do
                      if [ $found_separator -eq 1 ]; then
                          # Đây là các hàng của bảng, loại bỏ khoảng trắng thừa
                          local trimmed_line=$(echo "$line" | xargs)
                          if [[ -n "$trimmed_line" ]]; then
                              existing_table_rows+=("$trimmed_line")
                          fi
                      elif [[ "$line" == "|-----|----------|----------|--------------|--------------|" ]]; then
                          # Đã tìm thấy dòng phân cách của bảng
                          found_separator=1
                      fi
                  done < "$results_file"
              fi

              # Kết hợp các mục mới và hiện có, các mục mới nhất sẽ ở đầu
              local temp_combined_entries=("${new_entries[@]}")
              for row in "${existing_table_rows[@]}"; do
                  temp_combined_entries+=("$row")
              done
              
              # Giới hạn số lượng mục nhập chỉ còn 30 gần nhất
              local max_entries=30
              local final_entries=()
              for (( i=0; i<${#temp_combined_entries[@]} && i<max_entries; i++ )); do
                  final_entries+=("${temp_combined_entries[i]}")
              done

              # Xây dựng lại file Markdown hoàn chỉnh
              {
                  echo "# Kết quả tạo tài khoản và khóa"
                  echo ""
                  echo "_Generated at: $current_datetime UTC_"
                  echo "_OS của trình chạy: $(uname -s)_"
                  echo ""
                  echo "| Key | Username | Password | Expires Date | License Name |" # Tiêu đề bảng
                  echo "|-----|----------|----------|--------------|--------------|" # Dòng phân cách bảng

                  # In các hàng dữ liệu đã được lọc và sắp xếp
                  for entry in "${final_entries[@]}"; do
                      echo "$entry"
                  done
              } > "$results_file"

              echo "Cập nhật $results_file thành công."
          }

          # Thử từng tổ hợp cho đến khi thành công
          for CURRENT_OS in "${SHUFFLED_OS[@]}"; do
            export CURRENT_OS
            echo "=== Thử với OS: $CURRENT_OS ==="
            
            for MAIL in "${SHUFFLED_MAILS[@]}"; do
              for KEY_TYPE in "${SHUFFLED_KEYS[@]}"; do
                echo "=== Thử tổ hợp: OS=G$, Mail=$MAIL, Key Type=$KEY_TYPE ==="
                
                # Xóa các file kết quả cũ để đảm bảo sạch sẽ
                rm -f output.log *KEYS.txt *ACCOUNTS.txt

                # Chạy tạo tài khoản nếu cần
                if [[ "$ACCOUNT" != "0" ]]; then
                  echo "Tạo $ACCOUNT tài khoản với $MAIL..."
                  run_with_timeout python3 main.py --auto-detect-browser --account --email-api "$MAIL" \
                    --skip-update-check --no-logo --disable-progress-bar --disable-logging \
                    --repeat "$ACCOUNT" | tee -a output.log
                fi
                
                # Chạy tạo key nếu cần
                if [[ "$KEY" != "0" ]]; then
                  echo "Tạo $KEY khóa với $MAIL và $KEY_TYPE..."
                  run_with_timeout python3 main.py --auto-detect-browser "$KEY_TYPE" --email-api "$MAIL" \
                    --skip-update-check --no-logo --disable-progress-bar --disable-logging \
                    --repeat "$KEY" | tee -a output.log

                  # Kiểm tra kết quả để đảm bảo tất cả các trường cần thiết đều có
                  if grep -q "License Key:" output.log && \
                     grep -q "Account Email:" output.log && \
                     grep -q "Account Password:" output.log && \
                     grep -q "License Out Date:" output.log && \
                     grep -q "License Name:" output.log; then
                    echo "✅ Tạo khóa thành công với OS=$CURRENT_OS!"
                    # Phân tích đầu ra và cập nhật file markdown với kết quả mới
                    update_markdown_results output.log
                    SUCCESS=1
                    break 3  # Thoát khỏi tất cả các vòng lặp nếu thành công
                  else
                    echo "❌ Không thể tạo khóa với tổ hợp này hoặc thông tin bị thiếu, thử tổ hợp tiếp theo..."
                  fi
                else
                  # Nếu không cần tạo key, chỉ tạo tài khoản và coi là thành công
                  if [[ "$ACCOUNT" != "0" ]]; then
                    echo "Chỉ tạo tài khoản, không tạo khóa. Coi là thành công."
                    SUCCESS=1
                    break 3
                  fi
                fi
              done
            done
          done

          # Kiểm tra kết quả cuối cùng của tất cả các lần thử
          if [[ $SUCCESS -eq 0 ]]; then
            echo "❌ Đã thử tất cả tổ hợp nhưng không thành công!"
            exit 1 # Kết thúc workflow với lỗi
          fi

      - name: Cập nhật và đẩy kết quả
        if: success()
        shell: bash
        run: |
          # Cấu hình thông tin người dùng cho git commit
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Kiểm tra xem file markdown có tồn tại không và có thay đổi để commit/push không
          if [ -f "generated_results.md" ]; then
            git add generated_results.md
            if ! git diff --cached --quiet; then
              git commit -m "Cập nhật kết quả từ $CURRENT_OS [skip ci]"
              git push origin HEAD:${{ github.event.inputs.branch || 'main' }}
            else
              echo "Không có thay đổi để commit/push."
            fi
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
