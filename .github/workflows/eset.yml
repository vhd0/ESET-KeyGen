name: Generator

on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:
    inputs:
      account:
        description: 'Number of Accounts to be generated (default = 0)'
        required: false
        default: '0'
      key:
        description: 'Number of Keys to be generated (default = 1)'
        required: false
        default: '1'
      mail:
        description: 'Choose the mail provider to generate license'
        required: true
        type: choice
        options:
          - 1secmail
          - guerrillamail
          - developermail
          - mailticking
          - fakemail
          - inboxes
          - incognitomail
        default: fakemail
      key_type:
        description: 'Modes of operation'
        required: true
        type: choice
        options:
          - --key
          - --small-business-key
          - --vpn-codes
        default: --key
      os:
        description: 'Operating System of runner'
        required: true
        type: choice
        options:
          - macOS
          - Linux
          - Windows
        default: macOS
      branch:
        description: "Repository branch (don't touch it if you don't know what it is!!!)"
        required: false
        type: choice
        options:
          - main
          - test
        default: main

env:
  ACCOUNT: 0
  KEY: 1
  MAIL: fakemail
  KEY_TYPE: --key
  OS: Linux
  BRANCH: main

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      account: ${{ steps.setvars.outputs.account }}
      key: ${{ steps.setvars.outputs.key }}
      mail: ${{ steps.setvars.outputs.mail }}
      key_type: ${{ steps.setvars.outputs.key_type }}
      os: ${{ steps.setvars.outputs.os }}
      branch: ${{ steps.setvars.outputs.branch }}
    steps:
      - name: Set variables based on event
        id: setvars
        run: |
          echo "account=${{ github.event.inputs.account || '0' }}" >> $GITHUB_OUTPUT
          echo "key=${{ github.event.inputs.key || '1' }}" >> $GITHUB_OUTPUT
          echo "mail=${{ github.event.inputs.mail || 'fakemail' }}" >> $GITHUB_OUTPUT
          echo "key_type=${{ github.event.inputs.key_type || '--key' }}" >> $GITHUB_OUTPUT
          echo "os=${{ github.event.inputs.os || 'Linux' }}" >> $GITHUB_OUTPUT
          echo "branch=${{ github.event.inputs.branch || 'main' }}" >> $GITHUB_OUTPUT

  generate:
    needs: setup
    runs-on: ${{ matrix.os }}
    if: ${{ needs.setup.outputs.os == matrix.name }}
    strategy:
      matrix:
        include:
          - name: Linux
            os: ubuntu-latest
            shell: bash
            install: |
              sudo apt update
              sudo apt install -y python3-pip python3-venv
          - name: macOS
            os: macos-latest
            shell: bash
            install: |
              brew install python
          - name: Windows
            os: windows-latest
            shell: pwsh
            install: ''
    steps:
      - name: Setup Python and Clone Repo
        shell: ${{ matrix.shell }}
        run: |
          git clone -b ${{ needs.setup.outputs.branch }} https://github.com/rzc0d3r/ESET-KeyGen.git
          cd ESET-KeyGen
          ${{ matrix.install }}
          python3 -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt

          ACCOUNT=${{ needs.setup.outputs.account }}
          KEY=${{ needs.setup.outputs.key }}
          MAIL=${{ needs.setup.outputs.mail }}
          KEY_TYPE=${{ needs.setup.outputs.key_type }}

          mkdir -p output

          if [[ "$ACCOUNT" -ne 0 ]]; then
            python3 main.py --auto-detect-browser --account --email-api $MAIL --skip-update-check --no-logo --disable-progress-bar --disable-logging --repeat $ACCOUNT
            cat ./*ACCOUNTS.txt >> $GITHUB_STEP_SUMMARY || true
          fi

          if [[ "$KEY" -ne 0 ]]; then
            python3 main.py --auto-detect-browser $KEY_TYPE --email-api $MAIL --skip-update-check --no-logo --disable-progress-bar --disable-logging --repeat $KEY
            DATE=$(date -u +"%Y-%m-%d")
            for f in ./*KEYS.txt; do
              while IFS= read -r line; do
                echo "$DATE|$line" >> output/new_keys.txt
              done < "$f"
            done
            cat ./*KEYS.txt >> $GITHUB_STEP_SUMMARY || true

      - name: Checkout main branch to update Keys.txt
        uses: actions/checkout@v4
        with:
          ref: main
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Merge and prune Keys.txt
        shell: bash
        run: |
          mkdir -p keys
          touch keys/Keys.txt
          if [ -f Keys.txt ]; then cp Keys.txt keys/Keys.txt; fi
          cat output/new_keys.txt >> keys/Keys.txt
          awk -F'|' -v limit="$(date -u -d '30 days ago' +%Y-%m-%d)" '$1 >= limit' keys/Keys.txt > Keys.txt

      - name: Commit Keys.txt to main
        shell: bash
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add Keys.txt
          git commit -m "Update Keys.txt on $(date -u)"
          git push origin main
