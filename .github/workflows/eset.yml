name: Automated Account and Key Generator
on:
  # Lên lịch chạy hàng ngày vào lúc 00:00 UTC
  schedule:
    - cron: "0 0 * * *"
  # Cho phép chạy thủ công từ giao diện GitHub Actions
  workflow_dispatch:
    inputs:
      account:
        description: 'Số lượng tài khoản cần tạo (mặc định = 0)'
        required: false
        default: '0'
        type: string
      key:
        description: 'Số lượng khóa cần tạo (mặc định = 1)'
        required: false
        default: '1'
        type: string
      mail:
        description: 'Chọn nhà cung cấp email để tạo giấy phép'
        required: true
        type: choice
        options:
          - 1secmail
          - guerrillamail
          - developermail
          - mailticking
          - fakemail
          - inboxes
          - incognitomail
          - emailfake
        default: emailfake
      key_type:
        description: 'Chế độ hoạt động'
        required: true
        type: choice
        options:
          - --key
          - --small-business-key
        default: --key
      os:
        description: 'Hệ điều hành của runner (Linux, macOS, Windows)'
        required: true
        type: choice
        options:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        default: windows-latest
      branch:
        description: "Nhánh kho lưu trữ (không chạm vào nếu bạn không biết gì về nó!!!)"
        required: false
        type: choice
        options:
          - main
          - test
        default: main

jobs:
  prepare-run:
    runs-on: ubuntu-latest
    # Luôn chạy job này để xác định các biến đầu vào, dù là thủ công hay tự động
    outputs:
      account: ${{ steps.set-vars.outputs.account }}
      key: ${{ steps.set-vars.outputs.key }}
      mail: ${{ steps.set-vars.outputs.mail }}
      key_type: ${{ steps.set-vars.outputs.key_type }}
      os: ${{ steps.set-vars.outputs.os }}
      branch: ${{ steps.set-vars.outputs.branch }}
    steps:
      - name: Đặt biến dựa trên loại trigger
        id: set-vars
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Sử dụng các giá trị nhập từ workflow_dispatch nếu chạy thủ công
            echo "account=${{ github.event.inputs.account || '0' }}" >> $GITHUB_OUTPUT
            echo "key=${{ github.event.inputs.key || '1' }}" >> $GITHUB_OUTPUT
            echo "mail=${{ github.event.inputs.mail || 'emailfake' }}" >> $GITHUB_OUTPUT
            echo "key_type=${{ github.event.inputs.key_type || '--key' }}" >> $GITHUB_OUTPUT
            echo "os=${{ github.event.inputs.os || 'windows-latest' }}" >> $GITHUB_OUTPUT
            echo "branch=${{ github.event.inputs.branch || 'main' }}" >> $GITHUB_OUTPUT
            echo "Chạy thủ công với các giá trị đã chọn."
          else # Sự kiện schedule (lịch trình)
            # Định nghĩa các tùy chọn để ngẫu nhiên hóa
            mail_options=("1secmail" "guerrillamail" "developermail" "mailticking" "fakemail" "inboxes" "incognitomail" "emailfake")
            key_type_options=("--key" "--small-business-key")
            os_options=("ubuntu-latest" "macos-latest" "windows-latest")
            branch_options=("main" "test")
            # Chọn ngẫu nhiên các giá trị
            random_mail=${mail_options[$RANDOM % ${#mail_options[@]}]}
            random_key_type=${key_type_options[$RANDOM % ${#key_type_options[@]}]}
            random_os=${os_options[$RANDOM % ${#os_options[@]}]}
            random_branch=${branch_options[$RANDOM % ${#branch_options[@]}]}
            echo "account=0" >> $GITHUB_OUTPUT
            echo "key=1" >> $GITHUB_OUTPUT
            echo "mail=$random_mail" >> $GITHUB_OUTPUT
            echo "key_type=$random_key_type" >> $GITHUB_OUTPUT
            echo "os=$random_os" >> $GITHUB_OUTPUT
            echo "branch=$random_branch" >> $GITHUB_OUTPUT
            echo "Chạy tự động với các giá trị ngẫu nhiên."
          fi

  generate-account-and-key:
    # Job này phụ thuộc vào 'prepare-run' để lấy các đầu vào đã được xác định
    needs: prepare-run
    # Sử dụng hệ điều hành được chọn từ job trước
    runs-on: ${{ needs.prepare-run.outputs.os }}
    permissions:
      contents: write # Cấp quyền ghi cho GITHUB_TOKEN để đẩy thay đổi
    steps:
      - name: Kiểm tra kho lưu trữ
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }} # Đảm bảo GITHUB_TOKEN được sử dụng để checkout
      
      - name: Thiết lập & Chạy Script (Đa nền tảng)
        shell: bash # Sử dụng Bash cho tất cả các hệ điều hành để nhất quán
        run: |
          # Cài đặt Python và các phụ thuộc
          if command -v brew &> /dev/null; then
            # macOS
            brew install python@3.11 || true
          elif command -v apt-get &> /dev/null; then
            # Linux
            sudo apt update
            sudo apt install -y python3-pip python3-venv
          elif command -v python &> /dev/null; then
            # Windows (Git Bash/WSL) - Python thường đã có sẵn
            echo "Python đã có sẵn trên Windows runner."
          else
            echo "Lỗi: Không tìm thấy Python. Vui lòng cài đặt Python trên runner."
            exit 1
          fi

          # Tạo và kích hoạt môi trường ảo Python
          python3 -m venv venv
          # Kích hoạt venv tùy thuộc vào OS
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            source venv/Scripts/activate # Đối với Windows runners (Git Bash/WSL)
          else
            source venv/bin/activate # Đối với Linux/macOS
          fi
          
          # Cài đặt các phụ thuộc Python
          pip install -r requirements.txt
          
          # Gán các biến từ đầu ra của job 'prepare-run'
          ACCOUNT="${{ needs.prepare-run.outputs.account }}"
          KEY="${{ needs.prepare-run.outputs.key }}"
          MAIL="${{ needs.prepare-run.outputs.mail }}"
          KEY_TYPE="${{ needs.prepare-run.outputs.key_type }}"
          echo "Đang chạy với:"
          echo "  Tài khoản: $ACCOUNT"
          echo "  Khóa: $KEY"
          echo "  Email: $MAIL"
          echo "  Loại khóa: $KEY_TYPE"
          
          # Chạy tạo tài khoản nếu ACCOUNT không phải là 0
          if [[ "$ACCOUNT" != "0" ]]; then
            python3 main.py --auto-detect-browser --account --email-api "$MAIL" --skip-update-check --no-logo --disable-progress-bar --disable-logging --repeat "$ACCOUNT"
            echo "### Tài khoản đã tạo" >> $GITHUB_STEP_SUMMARY
            cat ./*ACCOUNTS.txt >> $GITHUB_STEP_SUMMARY 2>/dev/null || echo "Không có" >> $GITHUB_STEP_SUMMARY
          fi
          # Chạy tạo khóa nếu KEY không phải là 0
          if [[ "$KEY" != "0" ]]; then
            python3 main.py --auto-detect-browser "$KEY_TYPE" --email-api "$MAIL" --skip-update-check --no-logo --disable-progress-bar --disable-logging --repeat "$KEY"
            echo -e "\n### Khóa đã tạo" >> $GITHUB_STEP_SUMMARY
            cat ./*KEYS.txt >> $GITHUB_STEP_SUMMARY 2>/dev/null || echo "Không có" >> $GITHUB_STEP_SUMMARY
          fi

          # Ghi script Python vào một tệp tạm thời
          cat << 'EOF' > format_and_update_md.py
import os
import glob
import re
import datetime

def clean_value(value):
    """Removes newlines and trims whitespace, escapes pipe characters."""
    if value is None:
        return ""
    value = value.strip().replace('\n', ' ').replace('\r', '')
    return value.replace('|', '\\|')

def format_field_for_markdown(field_name, value):
    """Formats a field for Markdown table, wrapping passwords/keys in backticks."""
    cleaned_value = clean_value(value)
    if field_name in ["password", "license_key"]:
        if cleaned_value:
            # Escape backticks within the value itself
            return f'`{cleaned_value.replace("`", "\\`")}`'
        return "" # Return empty string if value is empty, not empty backticks
    return cleaned_value

def parse_and_format_license_data(account_file_patterns, key_file_patterns, output_file, max_entries=30):
    all_entries = []

    # Read existing entries if the file exists (skip header and separator)
    if os.path.exists(output_file):
        with open(output_file, 'r', encoding='utf-8', errors='ignore') as f:
            lines = f.readlines()
            if len(lines) > 2: # Skip header and separator lines
                for line in lines[2:]:
                    line = line.strip()
                    # Check if the line is a valid table row before adding
                    if line.startswith('|') and line.endswith('|') and '|' in line[1:-1]:
                        all_entries.append(line)

    # Process new account and key files
    for patterns in [account_file_patterns, key_file_patterns]:
        for pattern in patterns:
            for filepath in glob.glob(pattern):
                try:
                    with open(filepath, 'r', encoding='utf-8', errors='ignore') as f:
                        content = f.read()
                        # Split by lines of at least 20 hyphens, ensuring blocks are clean
                        blocks = [block.strip() for block in re.split(r'-{20,}', content) if block.strip()]
                        
                        for block in blocks:
                            email = re.search(r'Account Email: (.*)', block)
                            password = re.search(r'Account Password: (.*)', block)
                            license_name = re.search(r'License Name: (.*)', block)
                            license_key = re.search(r'License Key: (.*)', block)
                            license_out_date = re.search(r'License Out Date: (.*)', block)

                            email_val = format_field_for_markdown("email", email.group(1)) if email else ""
                            password_val = format_field_for_markdown("password", password.group(1)) if password else ""
                            license_name_val = format_field_for_markdown("license_name", license_name.group(1)) if license_name else ""
                            license_key_val = format_field_for_markdown("license_key", license_key.group(1)) if license_key else ""
                            license_out_date_val = format_field_for_markdown("license_out_date", license_out_date.group(1)) if license_out_date else ""

                            # Only add row if at least one field has content
                            if any([email_val, password_val, license_name_val, license_key_val, license_out_date_val]):
                                all_entries.append(f"| {email_val} | {password_val} | {license_name_val} | {license_key_val} | {license_out_date_val} |")

                except Exception as e:
                    print(f"Error processing file {filepath}: {e}")

    # Keep only the latest max_entries
    all_entries = all_entries[-max_entries:]

    # Write the final Markdown table
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write("| Email tài khoản | Mật khẩu tài khoản | Tên giấy phép | Khóa giấy phép | Ngày hết hạn |\n")
        f.write("|-----------------|--------------------|---------------|---------------|--------------|\n")
        if not all_entries:
            f.write("| Không có | Không có | Không có | Không có | Không có |\n")
        else:
            for entry_row in all_entries:
                f.write(entry_row + "\n")

# Main execution block
if __name__ == "__main__":
    # Assuming script is run from ESET-KeyGen directory
    parse_and_format_license_data(['./*ACCOUNTS.txt'], ['./*KEYS.txt'], 'generated_results.md', 30)
EOF
          # Thực thi script Python
          python3 format_and_update_md.py
          # Kết thúc logic định dạng và tạo generated_results.md

      - name: Cập nhật và đẩy kết quả vào nhánh chính
        if: success() || failure() # Chạy ngay cả khi các bước trước có lỗi nhẹ
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Kiểm tra xem có thay đổi nào trong generated_results.md không
          git add generated_results.md
          git diff-index --quiet HEAD || git commit -m "Cập nhật kết quả tạo tài khoản và khóa tự động"
          
          # Đẩy lên nhánh đã chọn
          git push origin ${{ needs.prepare-run.outputs.branch }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Cần token để đẩy lên repo
