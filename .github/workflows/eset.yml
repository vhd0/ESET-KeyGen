name: Automated Account and Key Generator

on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:
    inputs:
      account:
        description: 'Số lượng tài khoản cần tạo (mặc định = 0)'
        required: false
        default: '0'
        type: string
      key:
        description: 'Số lượng khóa cần tạo (mặc định = 1)' 
        required: false
        default: '1'
        type: string
      branch:
        description: "Nhánh kho lưu trữ (không chạm vào nếu bạn không biết gì về nó!!!)"
        required: false
        type: choice
        options:
          - main
          - test
        default: main

jobs:
  generate-account-and-key:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Kiểm tra kho lưu trữ
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.event.inputs.branch || 'main' }}

      - name: Thiết lập môi trường Python
        run: |
          sudo apt update
          sudo apt install -y python3-pip python3-venv

      - name: Tạo script Python xử lý kết quả
        shell: bash
        run: |
          cat > format_results.py << 'EOF'
          import re
          import os
          from datetime import datetime

          def parse_keys_file(filename):
              results = []
              key = email = password = exp_date = None
              with open(filename, 'r', encoding='utf-8') as f:
                  for line in f:
                      if 'License Key:' in line:
                          key = line.split()[-1]
                      elif 'Account Email:' in line:
                          email = line.split()[-1]
                      elif 'Account Password:' in line:
                          password = line.split('Account Password:')[-1].strip()
                      elif 'License Out Date:' in line:
                          date_str = line.split()[-1]
                          match = re.search(r'(\d{2})[./](\d{2})[./](\d{4})', date_str)
                          if match:
                              day, month, year = match.groups()
                              exp_date = f"{year}-{month}-{day}"
                          if all([key, email, password, exp_date]):
                              results.append({
                                  'key': key,
                                  'username': email,
                                  'password': password,
                                  'expires_date': exp_date
                              })
                              key = email = password = exp_date = None
              return results

          def main():
              key_files = [f for f in os.listdir('.') if f.endswith('KEYS.txt')]
              if not key_files:
                  print("No KEYS.txt file found.")
                  return
              key_file = key_files[0]
              results = parse_keys_file(key_file)
              
              # Ghi file Markdown
              with open('../generated_results.md', 'w', encoding='utf-8') as f:
                  now = datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')
                  user = os.environ.get('GITHUB_ACTOR', 'unknown')
                  current_os = os.environ.get('CURRENT_OS', 'unknown')
                  f.write(f"# Kết quả tạo tài khoản và khóa\n\n")
                  f.write(f"_Generated at: {now} UTC by {user}_\n\n")
                  f.write(f"_OS: {current_os}_\n\n")
                  if results:
                      f.write("| Key | Username | Password | Expires Date |\n")
                      f.write("|-----|----------|----------|--------------|\n")
                      for r in results:
                          f.write(f"| {r['key']} | {r['username']} | {r['password']} | {r['expires_date']} |\n")
                  else:
                      f.write("Không có kết quả hợp lệ.\n")

          if __name__ == '__main__':
              main()
          EOF

      - name: Thử tất cả tổ hợp cho đến khi thành công
        shell: bash
        env:
          ACCOUNT: ${{ github.event.inputs.account || '0' }}
          KEY: ${{ github.event.inputs.key || '1' }}
        run: |
          # Clone tool
          git clone -b ${{ github.event.inputs.branch || 'main' }} https://github.com/rzc0d3r/ESET-KeyGen.git
          cd ESET-KeyGen
          
          # Tạo và kích hoạt venv
          python3 -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt

          # Định nghĩa tất cả tổ hợp có thể
          MAIL_PROVIDERS=("1secmail" "guerrillamail" "developermail" "mailticking" "fakemail" "inboxes" "incognitomail" "emailfake")
          KEY_TYPES=("--key" "--small-business-key")
          OS_LIST=("Linux" "Windows" "macOS")
          
          # Random thứ tự các tổ hợp
          SHUFFLED_MAILS=($(printf "%s\n" "${MAIL_PROVIDERS[@]}" | shuf))
          SHUFFLED_KEYS=($(printf "%s\n" "${KEY_TYPES[@]}" | shuf))
          SHUFFLED_OS=($(printf "%s\n" "${OS_LIST[@]}" | shuf))

          SUCCESS=0
          echo "Bắt đầu thử các tổ hợp ngẫu nhiên..."

          # Function để chạy command với timeout
          run_with_timeout() {
            local timeout_duration=90
            local command=("$@")
            
            # Tạo file temp để kiểm tra PID
            temp_file=$(mktemp)
            
            # Chạy command trong background
            "${command[@]}" & pid=$!
            
            # Chờ trong timeout_duration giây
            for ((i=1; i<=timeout_duration; i++)); do
              if ! kill -0 $pid 2>/dev/null; then
                # Process đã kết thúc
                wait $pid
                rm -f "$temp_file"
                return $?
              fi
              sleep 1
            done
            
            # Kill process nếu vẫn còn chạy
            kill -9 $pid 2>/dev/null
            wait $pid 2>/dev/null
            rm -f "$temp_file"
            echo "Process timed out after ${timeout_duration}s"
            return 124
          }

          # Function để kiểm tra thành công
          check_success() {
            if ls *KEYS.txt 1> /dev/null 2>&1 && grep -q "License Key:" *KEYS.txt; then
              return 0
            fi
            return 1
          }

          # Thử từng tổ hợp cho đến khi thành công
          for CURRENT_OS in "${SHUFFLED_OS[@]}"; do
            export CURRENT_OS
            echo "=== Thử với OS: $CURRENT_OS ==="
            
            for MAIL in "${SHUFFLED_MAILS[@]}"; do
              for KEY_TYPE in "${SHUFFLED_KEYS[@]}"; do
                echo "=== Thử tổ hợp: OS=$CURRENT_OS, Mail=$MAIL, Key Type=$KEY_TYPE ==="
                
                # Xóa file kết quả cũ
                rm -f *KEYS.txt *ACCOUNTS.txt
                
                # Chạy tạo account nếu cần
                if [[ "$ACCOUNT" != "0" ]]; then
                  echo "Tạo $ACCOUNT tài khoản với $MAIL..."
                  run_with_timeout python3 main.py --auto-detect-browser --account --email-api "$MAIL" \
                    --skip-update-check --no-logo --disable-progress-bar --disable-logging \
                    --repeat "$ACCOUNT"
                fi
                
                # Chạy tạo key nếu cần
                if [[ "$KEY" != "0" ]]; then
                  echo "Tạo $KEY khóa với $MAIL và $KEY_TYPE..."
                  run_with_timeout python3 main.py --auto-detect-browser "$KEY_TYPE" --email-api "$MAIL" \
                    --skip-update-check --no-logo --disable-progress-bar --disable-logging \
                    --repeat "$KEY"

                  # Kiểm tra kết quả
                  if check_success; then
                    echo "✅ Tạo khóa thành công với OS=$CURRENT_OS!"
                    SUCCESS=1
                    break 3  # Thoát khỏi cả 3 vòng lặp
                  else
                    echo "❌ Không thể tạo khóa với tổ hợp này, thử tổ hợp tiếp theo..."
                  fi
                else
                  # Nếu không cần tạo key, coi như thành công
                  SUCCESS=1
                  break 3
                fi
              done
            done
          done

          # Kiểm tra kết quả cuối cùng
          if [[ $SUCCESS -eq 0 ]]; then
            echo "❌ Đã thử tất cả tổ hợp nhưng không thành công!"
            exit 1
          fi

          cd ..
          # Format kết quả
          python3 format_results.py

      - name: Cập nhật và đẩy kết quả
        if: success()
        shell: bash
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          if [ -f "generated_results.md" ]; then
            git add generated_results.md
            if ! git diff --cached --quiet; then
              git commit -m "Cập nhật kết quả từ $CURRENT_OS [skip ci]"
              git push origin HEAD:${{ github.event.inputs.branch || 'main' }}
            else
              echo "Không có thay đổi để commit/push."
            fi
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

permissions:
  contents: write
