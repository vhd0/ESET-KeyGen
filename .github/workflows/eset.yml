name: Account and Key Generator

on:
  schedule:
    - cron: "0 0 * * *" # chạy hàng ngày lúc 00:00 UTC
  workflow_dispatch:
    inputs:
      account:
        description: 'Number of Accounts to be generated (default = 0)'
        required: false
        default: '0'
        type: string
      key:
        description: 'Number of Keys to be generated (default = 1)'
        required: false
        default: '1'
        type: string
      branch:
        description: "Repository branch"
        required: false
        type: choice
        options:
          - main
          - test
        default: main

jobs:
  generate-account-and-key:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Clone KeyGen Repository
        run: git clone -b "${{ github.event.inputs.branch || 'main' }}" https://github.com/rzc0d3r/ESET-KeyGen.git

      - name: Setup Python Environment
        run: |
          cd ESET-KeyGen
          python3 -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt

      - name: Try Combinations and Get Key
        id: try_keys
        shell: bash
        run: |
          cd ESET-KeyGen
          source venv/bin/activate

          OS_ARR=("ubuntu-latest" "macos-latest" "windows-latest")
          MAIL_ARR=("1secmail" "guerrillamail" "developermail" "mailticking" "fakemail" "inboxes" "incognitomail" "emailfake")
          KEY_TYPE_ARR=("--key" "--small-business-key")

          ACCOUNT=${{ github.event.inputs.account || '0' }}
          KEY_COUNT=${{ github.event.inputs.key || '1' }}

          FOUND_CONTENT=""
          FOUND_OS=""
          FOUND_MAIL=""
          FOUND_KEY_TYPE=""

          try_key() {
            local os=$1
            local mail=$2
            local key_type=$3

            echo "🧪 Trying OS=$os | MAIL=$mail | TYPE=$key_type"
            rm -f ./*KEYS.txt ./*ACCOUNTS.txt

            timeout 90s python3 main.py --auto-detect-browser "$key_type" \
              --email-api "$mail" --skip-update-check --no-logo \
              --disable-progress-bar --disable-logging --repeat "$KEY_COUNT"

            if ls ./*KEYS.txt 1> /dev/null 2>&1; then
              local content
              content=$(cat ./*KEYS.txt)
              if [[ -n "$content" ]]; then
                FOUND_CONTENT="$content"
                FOUND_OS="$os"
                FOUND_MAIL="$mail"
                FOUND_KEY_TYPE="$key_type"
                return 0
              fi
            fi
            return 1
          }

          for os in "${OS_ARR[@]}"; do
            for mail in "${MAIL_ARR[@]}"; do
              for key_type in "${KEY_TYPE_ARR[@]}"; do
                if try_key "$os" "$mail" "$key_type"; then
                  echo "✅ Success with OS=$os MAIL=$mail TYPE=$key_type"
                  break 3
                fi
              done
            done
          done

          if [[ -z "$FOUND_CONTENT" ]]; then
            echo "❌ No key was found in any combination." >&2
            exit 1
          fi

          cd ..
          RESULT_FILE=results.md

          # Extract fields
          EMAIL=$(echo "$FOUND_CONTENT" | grep -i "Account Email" | cut -d':' -f2- | xargs)
          PASSWORD=$(echo "$FOUND_CONTENT" | grep -i "Account Password" | cut -d':' -f2- | xargs)
          LICENSE_NAME=$(echo "$FOUND_CONTENT" | grep -i "License Name" | cut -d':' -f2- | xargs)
          LICENSE_KEY=$(echo "$FOUND_CONTENT" | grep -i "License Key" | cut -d':' -f2- | xargs)
          LICENSE_EXP=$(echo "$FOUND_CONTENT" | grep -i "License Out Date" | cut -d':' -f2- | xargs)

          # Create table header if needed
          if [ ! -f "$RESULT_FILE" ]; then
            echo "| Email | Password | License Name | License Key | Expiry |" > "$RESULT_FILE"
            echo "|-------|----------|--------------|-------------|--------|" >> "$RESULT_FILE"
          fi

          # Sanitize to avoid Markdown breaking
          sanitize() {
            echo "$1" | tr '\n' ' ' | sed 's/|/\\|/g' | sed 's/\r//g' | xargs
          }

          EMAIL_SAFE=$(sanitize "$EMAIL")
          PASSWORD_SAFE=$(sanitize "$PASSWORD")
          LICENSE_NAME_SAFE=$(sanitize "$LICENSE_NAME")
          LICENSE_KEY_SAFE=$(sanitize "$LICENSE_KEY")
          LICENSE_EXP_SAFE=$(sanitize "$LICENSE_EXP")

          echo "| $EMAIL_SAFE | $PASSWORD_SAFE | $LICENSE_NAME_SAFE | $LICENSE_KEY_SAFE | $LICENSE_EXP_SAFE |" >> "$RESULT_FILE"

          # Keep last 30 entries
          tail -n +3 "$RESULT_FILE" | tail -30 > tmp_results.md
          head -n 2 "$RESULT_FILE" > header.md
          cat header.md tmp_results.md > "$RESULT_FILE"
          rm header.md tmp_results.md

      - name: Commit and Push Results
        if: success()
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add results.md
          git commit -m "✅ Update keygen result at $(date -u +"%Y-%m-%dT%H:%M:%SZ")" || echo "No changes to commit"
          git push
